{"version":3,"sources":["Components/VersionInput.jsx","Components/LanguageInput.jsx","Components/URLInput.jsx","Components/StyleInput.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["VersionInput","props","useState","value","placeholder","textField","setTextField","useEffect","disabled","language","TextField","variant","type","label","onChange","event","target","length","helperText","LanguageInput","visualValue","setVisualValue","setValue","Autocomplete","newValue","inputValue","onInputChange","options","renderInput","params","required","URLInput","InputProps","endAdornment","InputAdornment","position","IconButton","onClick","StyleInput","FormLabel","component","sx","textAlign","RadioGroup","row","justifyContent","FormControlLabel","control","Radio","useStyle","makeStyles","theme","badgeImage","height","justifyContentCenter","display","createTheme","palette","button","main","contrastText","App","classes","logo","version","url","style","leftColor","rightColor","badge","setBadge","placeholders","setPlaceholders","inputsDisabled","setInputsDisabled","src_img","src_markdown","Grid","container","spacing","item","alignItems","className","src","alt","href","rel","xs","FormControl","fullWidth","languageValue","index","technologyData","ThemeProvider","Button","size","color","navigator","clipboard","writeText","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a39ebd16.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\r\n\r\n//Import Material-UI hooks\r\nimport { TextField } from '@mui/material';\r\n\r\n//Component content\r\nconst VersionInput = (props) => {\r\n   //Local values\r\n   const [ textField, setTextField ] = useState({\r\n      value: '',\r\n      placeholder: props.placeholder\r\n   });\r\n\r\n   useEffect(() => {\r\n      setTextField({\r\n         ...textField,\r\n         value: '',\r\n         placeholder: props.placeholder\r\n      });\r\n      // eslint-disable-next-line\r\n   }, [props.disabled || props.language] );\r\n\r\n   const inputHandler = (event) => {\r\n      const value = event.target.value; //Save our event target value into a constant to use several times\r\n      setTextField({...textField, value: value }); //Update its value\r\n      \r\n      if(value.length === 0 ){\r\n         props.onChange(textField.placeholder); //If value is empty, update to its placeholder\r\n      }else{\r\n         props.onChange(value); //If it has a value, update to that value\r\n      }\r\n      \r\n   };\r\n\r\n   return (\r\n      <TextField variant='standard' type='text' disabled={props.disabled} label='Version' value={textField.value} onChange={inputHandler} placeholder={textField.placeholder} helperText=' ' />\r\n   );\r\n};\r\n\r\nexport default VersionInput; //Export component","import React, { useState } from 'react';\r\n\r\n//Import Material-UI hooks\r\nimport { Autocomplete, TextField } from '@mui/material';\r\n\r\n//Component content\r\nconst LanguageInput = (props) => {\r\n\r\n   const options = [\r\n      'Angular',\r\n      'C',\r\n      'C++',\r\n      'Dart',\r\n      'Flutter',\r\n      'Fortran',\r\n      'JavaScript',\r\n      'Mongo',\r\n      'Node',\r\n      'Perl',\r\n      'Python',\r\n      'React',\r\n      'TypeScript',\r\n      'Vue'\r\n   ];\r\n\r\n   const [visualValue, setVisualValue] = useState(''); //inputValue - Visual only\r\n   const [value, setValue] = useState(null); //Value - real value\r\n\r\n   const inputHandler = (event, newValue) => {\r\n      setValue(newValue);\r\n      props.onChange(newValue)\r\n   };\r\n\r\n   return (\r\n      <Autocomplete\r\n         value={value}\r\n         onChange={inputHandler}\r\n\r\n         inputValue={visualValue}\r\n         onInputChange={(event, newValue) => {\r\n            setVisualValue(newValue);\r\n         }}\r\n\r\n         options={options}\r\n\r\n         renderInput={(params) => (\r\n            <TextField\r\n               variant='standard'\r\n               {...params}\r\n               label='Technology'\r\n               required\r\n               helperText='PL, framework, library, etc.'\r\n            />\r\n         )}\r\n      />\r\n   );\r\n};\r\n\r\nexport default LanguageInput; //Export component","import React, { useEffect, useState } from 'react';\r\n\r\n//Import Material-UI hooks\r\nimport { TextField, IconButton, InputAdornment } from '@mui/material';\r\n\r\n//Import Material-UI icons\r\nimport CopyAllIcon from '@mui/icons-material/CopyAll';\r\n\r\n//Component content\r\nconst URLInput = (props) => {\r\n\r\n   const [ textField, setTextField ] = useState({\r\n      value: '',\r\n      placeholder: props.placeholder\r\n   });\r\n\r\n   useEffect(() => {\r\n      setTextField({\r\n         ...textField,\r\n         value: '',\r\n         placeholder: props.placeholder\r\n      });\r\n      props.onChange('');\r\n      // eslint-disable-next-line\r\n   }, [props.disabled, props.language]);\r\n\r\n   const inputHandler = (event) => {\r\n      const value = event.target.value;\r\n\r\n      setTextField({ ...textField, value: value });\r\n      props.onChange(value);\r\n   };\r\n\r\n   const pasteURLHandler = () => {\r\n      setTextField({\r\n         ...textField,\r\n         value: textField.placeholder\r\n      });\r\n      props.onChange(textField.placeholder);\r\n   };\r\n\r\n   return (\r\n      <TextField\r\n         variant='standard'\r\n         disabled={props.disabled}\r\n         label='URL'\r\n         helperText='Page to be redirected to when click on badge'\r\n         value={textField.value}\r\n         onChange={inputHandler}\r\n         placeholder={props.placeholder}\r\n         InputProps={{\r\n            endAdornment: (\r\n               <InputAdornment position='end' >\r\n                  <IconButton disabled={props.disabled} onClick={pasteURLHandler} >\r\n                     <CopyAllIcon />\r\n                  </IconButton>\r\n               </InputAdornment>\r\n            )\r\n         }}\r\n      />\r\n   );\r\n};\r\n\r\nexport default URLInput; //Export component","import React from 'react';\r\n\r\n//Import Material-UI hooks\r\nimport { RadioGroup, Radio, FormControlLabel, FormLabel } from '@mui/material';\r\n\r\n//Component content\r\nconst StyleInput = (props) => {\r\n\r\n   const inputHandler = (event) => {\r\n      const value = event.target.value;\r\n      props.onChange(value);\r\n   };\r\n\r\n   return ( \r\n      <>\r\n         <FormLabel component='legend' sx={{textAlign:'center'}} >Style</FormLabel>\r\n         <RadioGroup row value={props.value} onChange={inputHandler} sx={{justifyContent:'center'}} >\r\n            <FormControlLabel value='flat' control={ <Radio /> } label='Flat' />\r\n            <FormControlLabel value='flat-square' control={ <Radio /> } label='Flat square' />\r\n            <FormControlLabel value='plastic' control={ <Radio /> } label='Plastic' />\r\n            <FormControlLabel value='for-the-badge' control={ <Radio /> } label='For the badge' />\r\n         </RadioGroup>\r\n      </>\r\n   );\r\n};\r\n\r\nexport default StyleInput; //Export component","import React, { useEffect, useState } from 'react';\r\n\r\n//Import data\r\nimport technologyData from './dataBase.json';\r\n\r\n//Import Material-UI hooks\r\nimport { Button, Grid, FormControl, createTheme,ThemeProvider } from '@mui/material';\r\nimport { makeStyles } from '@mui/styles';\r\n\r\n//CSS\r\nimport './App.css';\r\n\r\n//Import custom components\r\nimport VersionInput from './Components/VersionInput';\r\nimport LanguageInput from './Components/LanguageInput';\r\nimport URLInput from './Components/URLInput';\r\nimport StyleInput from './Components/StyleInput';\r\n//import LogoInput from './Components/LogoInput';\r\n\r\n//Crate styles\r\nconst useStyle = makeStyles((theme) => ({\r\n   badgeImage: {\r\n      height: '63.5px'\r\n   },\r\n   justifyContentCenter:{\r\n      display: 'flex',\r\n      justifyContent: 'center'\r\n   }\r\n}));\r\n\r\nconst theme = createTheme({\r\n   palette:{\r\n      button:{\r\n         main: '#333333',\r\n         contrastText: '#fff'\r\n      }\r\n   }\r\n});\r\n\r\n//Component content\r\nconst App = () => {\r\n\r\n   const classes = useStyle(); //Declare styles\r\n\r\n   const [ badge, setBadge ] = useState({\r\n      language: 'Technology',\r\n      label: 'Technology',\r\n      logo: '',\r\n      version: 'Version',\r\n      url: '',\r\n      style: {\r\n         leftColor: '333333',\r\n         rightColor: '999999',\r\n         style: 'for-the-badge',\r\n      }\r\n   });\r\n\r\n   const [ placeholders, setPlaceholders ] = useState({\r\n      version: '',\r\n      url: ''\r\n   });\r\n\r\n   const [inputsDisabled, setInputsDisabled] = useState(true);\r\n\r\n   const languageHandler = (languageValue) => {\r\n      if( languageValue === null ){\r\n         setInputsDisabled(true);\r\n         setBadge({\r\n            ...badge,\r\n            language: 'Technology',\r\n            label: 'Technology',\r\n            logo: '',\r\n            version: 'version',\r\n            url: '',\r\n            style: {\r\n               ...badge.style,\r\n               leftColor: '333333',\r\n               rightColor: '999999'\r\n            }\r\n         });\r\n      }else{\r\n         setInputsDisabled(false);\r\n         for(let index=0; index<technologyData.length; index++){\r\n            if( languageValue === technologyData[index].language ){\r\n               setPlaceholders({\r\n                  ...placeholders,\r\n                  version: technologyData[index].version,\r\n                  url: technologyData[index].url,\r\n               });\r\n               setBadge({\r\n                  ...badge,\r\n                  language: technologyData[index].language,\r\n                  label: technologyData[index].label,\r\n                  logo: technologyData[index].logo,\r\n                  version: technologyData[index].version,\r\n                  style:{\r\n                     ...badge.style,\r\n                     leftColor: technologyData[index].leftColor,\r\n                     rightColor: technologyData[index].rightColor\r\n                  }\r\n               });\r\n               break;\r\n            }\r\n         }\r\n\r\n      }\r\n   };\r\n\r\n   const src_img = `https://img.shields.io/badge/${badge.version}-${badge.style.rightColor}?style=${badge.style.style}&logo=${badge.logo}&label=${badge.label}&labelColor=${badge.style.leftColor}`;\r\n   const src_markdown = `[![${badge.language}](${src_img})](${badge.url})`;\r\n\r\n   return (\r\n      <Grid container spacing={2} > {/*Main container*/}\r\n         <Grid item container spacing={2} alignItems='center' justifyContent='center' className={classes.badgeImage} > {/*Badge*/}\r\n            {badge.url.length===0 ? (\r\n               <div>\r\n                  <img src={src_img} alt=\"badge\" />\r\n               </div>\r\n            ):(\r\n               <a href={badge.url} target='_blank' rel='noopener noreferrer' >\r\n                  <img src={src_img} alt=\"badge\" />\r\n               </a>\r\n            )}\r\n         </Grid>\r\n         <Grid item container spacing={2} alignItems='center' justifyContent='center' > {/*Style*/}\r\n            <Grid item xs={4}  >\r\n               <FormControl fullWidth >\r\n                  <StyleInput value={badge.style.style} onChange={(event) => {setBadge({...badge, style:{...badge.style, style: event}})}} />\r\n               </FormControl>\r\n            </Grid>\r\n         </Grid>\r\n         <Grid item container spacing={2} alignItems='center' justifyContent='center' > {/*Language selector & Version*/}\r\n            <Grid item xs={2} > {/*Autocomplete - Language selector*/}\r\n               <FormControl fullWidth >\r\n                  <LanguageInput onChange={languageHandler} />\r\n               </FormControl>\r\n            </Grid>\r\n            <Grid item xs={2} > {/*TextField - Version*/}\r\n               <FormControl fullWidth >\r\n                  <VersionInput disabled={inputsDisabled} language={badge.language} placeholder={placeholders.version} onChange={(value) => {setBadge({...badge, version: value})}} />\r\n               </FormControl>\r\n            </Grid>\r\n         </Grid>\r\n         <Grid item container spacing={2} alignItems='center' justifyContent='center' > {/*URL*/}\r\n            <Grid item xs={4} >{/*TextField - URL */}\r\n               <FormControl fullWidth >\r\n                  <URLInput disabled={inputsDisabled} language={badge.language} placeholder={placeholders.url} onChange={(value) => {setBadge({...badge, url: value})}} />\r\n               </FormControl>\r\n            </Grid>\r\n         </Grid>\r\n         <Grid item container spacing={2} alignItems='center' justifyContent='center' > {/*Buttons*/}\r\n            <Grid item xs={2} sx={{ display:'flex', justifyContent:'right'}} > {/*Copy image*/}\r\n               <ThemeProvider theme={theme} >\r\n                  <Button size='small' disabled={inputsDisabled} variant='outlined' color='button' onClick={() => {navigator.clipboard.writeText(src_img)}} >Copy image URL</Button>\r\n               </ThemeProvider>\r\n            </Grid>\r\n            <Grid item xs={2} sx={{ display:'flex', justifyContent:'left'}} > {/*Copy markdown*/}\r\n               <ThemeProvider theme={theme} >\r\n                  <Button size='small' disabled={inputsDisabled} variant='outlined' color='button' onClick={() => {navigator.clipboard.writeText(src_markdown)}} >Copy markdown</Button>\r\n               </ThemeProvider>\r\n            </Grid>\r\n         </Grid>\r\n      </Grid>\r\n   );\r\n};\r\n\r\nexport default App; //Export component","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\n//Se importan hojas de estilo\r\nimport './index.css'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}