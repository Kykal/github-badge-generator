{"version":3,"sources":["Components/VersionInput.jsx","Components/LanguageInput.jsx","Components/URLInput.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["VersionInput","props","useState","value","placeholder","textField","setTextField","useEffect","disabled","TextField","variant","type","label","onChange","event","target","length","helperText","LanguageInput","visualValue","setVisualValue","setValue","Autocomplete","newValue","inputValue","onInputChange","options","renderInput","params","required","URLInput","useStyle","makeStyles","theme","badgeImage","height","createTheme","palette","button","main","contrastText","App","classes","language","version","url","style","leftColor","rightColor","badge","setBadge","technologyData","placeholders","setPlaceholders","inputsDisabled","setInputsDisabled","src_img","src_markdown","Grid","container","spacing","item","alignItems","justifyContent","className","src","alt","href","xs","FormControl","fullWidth","languageValue","index","sx","display","ThemeProvider","Button","size","color","onClick","navigator","clipboard","writeText","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7fe325cf.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\r\n\r\n//Import Material-UI hooks\r\nimport { TextField } from '@mui/material';\r\n\r\n//Component content\r\nconst VersionInput = (props) => {\r\n   //Local values\r\n   const [ textField, setTextField ] = useState({\r\n      value: '',\r\n      placeholder: props.placeholder\r\n   });\r\n\r\n   useEffect(() => {\r\n      if(props.disabled){\r\n         setTextField({\r\n            ...textField,\r\n            value: '',\r\n            placeholder: props.placeholder\r\n         });\r\n      }else{\r\n         setTextField({\r\n            ...textField,\r\n            placeholder: props.placeholder\r\n         });\r\n      }\r\n   }, [props] );\r\n\r\n   const inputHandler = (event) => {\r\n      const value = event.target.value; //Save our event target value into a constant to use several times\r\n      setTextField({...textField, value: value }); //Update its value\r\n      \r\n      if(value.length === 0 ){\r\n         props.onChange(textField.placeholder); //If value is empty, update to its placeholder\r\n      }else{\r\n         props.onChange(value); //If it has a value, update to that value\r\n      }\r\n      \r\n   };\r\n\r\n   return (\r\n      <TextField variant='standard' type='text' disabled={props.disabled} label='Version' value={textField.value} onChange={inputHandler} placeholder={textField.placeholder} helperText=' ' />\r\n   );\r\n};\r\n\r\nexport default VersionInput; //Export component","import React, { useState } from 'react';\r\n\r\n//Import Material-UI hooks\r\nimport { Autocomplete, TextField } from '@mui/material';\r\n\r\n//Component content\r\nconst LanguageInput = (props) => {\r\n\r\n   const options = [\r\n      'Python',\r\n      'MongoDB'\r\n   ]\r\n\r\n   const [visualValue, setVisualValue] = useState(''); //inputValue - Visual only\r\n   const [value, setValue] = useState(null); //Value - real value\r\n\r\n   const inputHandler = (event, newValue) => {\r\n      setValue(newValue);\r\n      props.onChange(newValue)\r\n   };\r\n\r\n   return (\r\n      <Autocomplete\r\n         value={value}\r\n         onChange={inputHandler}\r\n\r\n         inputValue={visualValue}\r\n         onInputChange={(event, newValue) => {\r\n            setVisualValue(newValue);\r\n         }}\r\n\r\n         options={options}\r\n\r\n         renderInput={(params) => (\r\n            <TextField\r\n               variant='standard'\r\n               {...params}\r\n               label='Technology'\r\n               required\r\n               helperText='PL, framework, library, etc.'\r\n            />\r\n         )}\r\n      />\r\n   );\r\n};\r\n\r\nexport default LanguageInput; //Export component","import React, { useEffect, useState } from 'react';\r\n\r\n//Import Material-UI hooks\r\nimport { TextField } from '@mui/material';\r\n\r\n//Component content\r\nconst URLInput = (props) => {\r\n\r\n   const [ textField, setTextField ] = useState({\r\n      value: '',\r\n      placeholder: props.placeholder\r\n   });\r\n\r\n   useEffect(() => {\r\n      if( props.disabled ){\r\n         setTextField({\r\n            ...textField,\r\n            value: '',\r\n            placeholder: props.placeholder\r\n         })\r\n      }else{\r\n         setTextField({\r\n            ...textField,\r\n            placeholder: props.placeholder\r\n         })\r\n      }\r\n   }, [props])\r\n\r\n   const inputHandler = (event) => {\r\n      const value = event.target.value;\r\n\r\n      setTextField({ ...textField, value: value });\r\n      props.onChange(value);\r\n   };\r\n\r\n   return (\r\n      <TextField\r\n         variant='standard'\r\n         disabled={props.disabled}\r\n         label='URL'\r\n         helperText='Page to be redirected to when click on badge'\r\n         value={textField.value}\r\n         onChange={inputHandler}\r\n         placeholder={props.placeholder}\r\n      />\r\n   );\r\n};\r\n\r\nexport default URLInput; //Export component","import React, { useState } from 'react';\r\n\r\n//Import Material-UI hooks\r\nimport { Button, Grid, FormControl } from '@mui/material';\r\nimport { createTheme,ThemeProvider } from '@mui/material';\r\nimport { makeStyles } from '@mui/styles';\r\n\r\n//CSS\r\nimport './App.css';\r\n\r\n//Import custom components\r\nimport VersionInput from './Components/VersionInput';\r\nimport LanguageInput from './Components/LanguageInput';\r\nimport URLInput from './Components/URLInput';\r\n\r\n//Crate styles\r\nconst useStyle = makeStyles((theme) => ({\r\n   badgeImage: {\r\n      height: '63.5px'\r\n   }\r\n}));\r\n\r\nconst theme = createTheme({\r\n   palette:{\r\n      button:{\r\n         main: '#333333',\r\n         contrastText: '#fff'\r\n      }\r\n   }\r\n});\r\n\r\n//Component content\r\nconst App = () => {\r\n\r\n   const classes = useStyle(); //Declare styles\r\n\r\n   const [ badge, setBadge ] = useState({\r\n      language: 'Technology',\r\n      version: 'Version',\r\n      url: '',\r\n      style: {\r\n         leftColor: '333333',\r\n         rightColor: '999999'\r\n      }\r\n   });\r\n\r\n   const technologyData = [\r\n      {language: 'Python', version: '3.10.0', url: 'https://www.python.org/', leftColor: 'FFD43B', rightColor: '1F425F'},\r\n      {language: 'MongoDB', version: '4.0.8', url: 'https://www.mongodb.com/', leftColor: '3F3E42', rightColor: '3FA037'}\r\n   ];\r\n\r\n   const [ placeholders, setPlaceholders ] = useState({\r\n      version: '',\r\n      url: ''\r\n   });\r\n\r\n   const [inputsDisabled, setInputsDisabled] = useState(true);\r\n\r\n   const languageHandler = (languageValue) => {\r\n      if( languageValue === null ){\r\n         setInputsDisabled(true);\r\n         setBadge({\r\n            ...badge,\r\n            language: 'technology',\r\n            version: 'version',\r\n            style: {\r\n               ...badge.style,\r\n               leftColor: '333333',\r\n               rightColor: '999999'\r\n            }\r\n         });\r\n      }else{\r\n         setInputsDisabled(false);\r\n         for(let index=0; index<technologyData.length; index++){\r\n            if( languageValue === technologyData[index].language ){\r\n               setPlaceholders({\r\n                  ...placeholders,\r\n                  version: technologyData[index].version,\r\n                  url: technologyData[index].url,\r\n               });\r\n               setBadge({\r\n                  ...badge,\r\n                  language: technologyData[index].language,\r\n                  version: technologyData[index].version,\r\n                  style:{\r\n                     ...badge.style,\r\n                     leftColor: technologyData[index].leftColor,\r\n                     rightColor: technologyData[index].rightColor\r\n                  }\r\n               });\r\n               break;\r\n            }\r\n         }\r\n\r\n      }\r\n   };\r\n\r\n   const src_img = `https://img.shields.io/badge/${badge.version}-${badge.style.rightColor}?style=for-the-badge&logo=${badge.language}&label=${badge.language}&labelColor=${badge.style.leftColor}`;\r\n   const src_markdown = `[![${badge.language}](${src_img})](${badge.url})`;\r\n\r\n   return (\r\n      <Grid container spacing={2} > {/*Main container*/}\r\n         <Grid item container spacing={2} alignItems='center' justifyContent='center' className={classes.badgeImage} > {/*Badge*/}\r\n            {badge.url.length===0 ? (\r\n               <div>\r\n                  <img src={src_img} alt=\"badge\" />\r\n               </div>\r\n            ):(\r\n               <a href={badge.url}>\r\n                  <img src={src_img} alt=\"badge\" />\r\n               </a>\r\n            )}\r\n         </Grid>\r\n         <Grid item container spacing={2} alignItems='center' justifyContent='center' > {/*Language selector & Version*/}\r\n            <Grid item xs={2} > {/*Autocomplete - Language selector*/}\r\n               <FormControl fullWidth >\r\n                  <LanguageInput onChange={languageHandler} />\r\n               </FormControl>\r\n            </Grid>\r\n            <Grid item xs={2} > {/*TextField - Version*/}\r\n               <FormControl fullWidth >\r\n                  <VersionInput disabled={inputsDisabled} placeholder={placeholders.version} onChange={(value) => {setBadge({...badge, version: value})}} />\r\n               </FormControl>\r\n            </Grid>\r\n         </Grid>\r\n         <Grid item container spacing={2} alignItems='center' justifyContent='center' > {/*URL*/}\r\n            <Grid item xs={4} >{/*TextField - URL */}\r\n               <FormControl fullWidth >\r\n                  <URLInput disabled={inputsDisabled} placeholder={placeholders.url} onChange={(value) => {setBadge({...badge, url: value})}} />\r\n               </FormControl>\r\n            </Grid>\r\n         </Grid>\r\n         <Grid item container spacing={2} alignItems='center' justifyContent='center' > {/*Buttons*/}\r\n            <Grid item xs={2} sx={{ display:'flex', justifyContent:'right'}} > {/*Copy image*/}\r\n               <ThemeProvider theme={theme} >\r\n                  <Button size='small' disabled={inputsDisabled} variant='outlined' color='button' onClick={() => {navigator.clipboard.writeText(src_img)}} >Copy image</Button>\r\n               </ThemeProvider>\r\n            </Grid>\r\n            <Grid item xs={2} sx={{ display:'flex', justifyContent:'left'}} > {/*Copy markdown*/}\r\n               <ThemeProvider theme={theme} >\r\n                  <Button size='small' disabled={inputsDisabled} variant='outlined' color='button' onClick={() => {navigator.clipboard.writeText(src_markdown)}} >Copy markdown</Button>\r\n               </ThemeProvider>\r\n            </Grid>\r\n         </Grid>\r\n      </Grid>\r\n   );\r\n};\r\n\r\nexport default App; //Export component","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\n//Se importan hojas de estilo\r\nimport './index.css'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}