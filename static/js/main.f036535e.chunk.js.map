{"version":3,"sources":["Components/Badge/Badge.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["SpecialChars","label","i","tempLabel","length","push","join","Badge","url","badge","tech","res","techs","forEach","tags","includes","CheckForTech","toLowerCase","version","style","Grid","item","xs","textAlign","minHeight","maxHeight","alt","src","Button","size","variant","onClick","navigator","clipboard","writeText","logo","hasLogo","labelColor","hasVersion","hasNoVersion","App","useState","setBadge","BadgeHandler","event","value","target","trim","name","BadgeOptionsHandler","checked","Container","maxWidth","container","spacing","display","alignContent","height","md","FormControl","fullWidth","TextField","onChange","helperText","InputLabel","Select","MenuItem","FormLabel","component","FormGroup","row","FormControlLabel","control","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f036535e.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\n//Import data\r\nimport techs from '../../Data/technologies.json';\r\n\r\n\r\n//Material design\r\nimport Button from '@mui/material/Button';\r\nimport Grid from '@mui/material/Grid';\r\n\r\n\r\n//Check if input techonolgy is on the list\r\nconst CheckForTech = (label) => {\r\n\tlet res = null;\r\n\t\r\n\ttechs.forEach( tech => {\r\n\t\tif(tech.tags.includes(label)){\r\n\t\t\tres = tech;\r\n\t\t}\r\n\t} );\r\n\r\n\treturn res;\r\n};\r\n\r\n//Change special characters\r\nconst SpecialChars = (label) => {\r\n\tlet tempLabel = [];\r\n\tlet i;\r\n\r\n\tfor( i=0; i<label.length; i++ ){\r\n\t\tif( label[i] === \"+\" ){\r\n\t\t\ttempLabel.push(\"%2B\");\r\n\t\t\tcontinue;\r\n\t\t}\r\n\t\tif( label[i] === \"#\" ){\r\n\t\t\ttempLabel.push(\"%23\");\r\n\t\t\tcontinue;\r\n\t\t}\r\n\t\ttempLabel.push( label[i] );\r\n\t}\r\n\r\n\ttempLabel = tempLabel.join('');\r\n\t\r\n\treturn tempLabel;\r\n}\r\n\r\n//Component content\r\nconst Badge = ({badge}) => {\r\n\tconst tech = CheckForTech(badge.label.toLowerCase());\r\n\tconst version = badge.version.length === 0 ? \"Version\" : badge.version;\r\n\tlet url;\r\n\r\n\t//If there's no results...\r\n\tif( tech === null ){\r\n\t\tconst label = badge.label.length === 0 ? \"Technology\" : SpecialChars(badge.label);\r\n\t\turl = `https://img.shields.io/badge/${version}-999999?style=${badge.style}&label=${label}&labelColor=333333`;\r\n\t\t\r\n\t\treturn (\r\n\t\t\t<>\r\n\t\t\t\t<Grid item xs={12} textAlign=\"center\" minHeight=\"4em\" maxHeight=\"4em\" >\r\n\t\t\t\t\t<img alt=\"Badge with version\" src={url} />\r\n\t\t\t\t</Grid>\r\n\t\t\t\t<Grid item xs={12} textAlign=\"center\" >\r\n\t\t\t\t\t<Button\r\n\t\t\t\t\t\tsize=\"small\"\r\n\t\t\t\t\t\tvariant=\"outlined\"\r\n\t\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\t\tnavigator.clipboard.writeText(url);\r\n\t\t\t\t\t\t}}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\tCopy URL\r\n\t\t\t\t\t</Button>\r\n\t\t\t\t</Grid>\r\n\t\t\t</>\r\n\t\t);\r\n\t};\r\n\r\n\tif( tech !== null && badge.label.length === 0 ){\r\n\t\turl = `https://img.shields.io/badge/${version}-999999?style=${badge.style}&label=Technology&labelColor=333333`;\r\n\t};\r\n\r\n\tconst logo = badge.hasLogo ? `&logo=${tech.label}` : \"\";\r\n\tconst labelColor = `&labelColor=${tech.hasVersion.label}`;\r\n\t\r\n\tif( tech !== null && badge.hasVersion ){\r\n\t\tconst label = badge.label.length === 0 ? `&label=Technology` : `&label=${SpecialChars(badge.label)}`;\r\n\t\turl = `https://img.shields.io/badge/${version}-${tech.hasVersion.version}?style=${badge.style}${logo}${label}${labelColor}`\r\n\t};\r\n\r\n\tif( tech !== null && !badge.hasVersion ){\r\n\t\tconst label = SpecialChars(badge.label);\r\n\t\turl = `https://img.shields.io/badge/${label}-${tech.hasNoVersion}?style=${badge.style}${logo}`\r\n\t};\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<Grid item xs={12} textAlign=\"center\" minHeight=\"4em\" maxHeight=\"4em\" >\r\n\t\t\t\t<img alt=\"Badge with version\" src={url} />\r\n\t\t\t</Grid>\r\n\t\t\t<Grid item xs={12} textAlign=\"center\" >\r\n\t\t\t\t<Button\r\n\t\t\t\t\tsize=\"small\"\r\n\t\t\t\t\tvariant=\"outlined\"\r\n\t\t\t\t\turl={url}\r\n\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\tnavigator.clipboard.writeText(url);\r\n\t\t\t\t\t}}\r\n\t\t\t\t>\r\n\t\t\t\t\tCopy URL\r\n\t\t\t\t</Button>\r\n\t\t\t</Grid>\r\n\t\t</>\r\n\t);\r\n};\r\n\r\nexport default Badge; //Export component","import React, { useState } from 'react';\r\n\r\n//Material design\r\nimport Container from '@mui/material/Container';\r\nimport Grid from '@mui/material/Grid';\r\nimport TextField from '@mui/material/TextField';\r\nimport InputLabel from '@mui/material/InputLabel';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport FormLabel from '@mui/material/FormLabel';\r\nimport CheckBox from '@mui/material/Checkbox';\r\nimport Select from '@mui/material/Select';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport FormGroup from '@mui/material/FormGroup';\r\n\r\n\r\n//Custom components\r\nimport Badge from './Components/Badge';\r\n\r\n\r\n//Component content\r\nconst App = () => {\r\n\r\n\t//Badge information\r\n\tconst [ badge, setBadge ] = useState({\r\n\t\tlabel: \"\",\r\n\t\thasVersion: true,\r\n\t\thasLogo: true,\r\n\t\tstyle: \"for-the-badge\",\r\n\t\tlogo: \"\",\r\n\t\tlabelColor: \"\",\r\n\t\tversion: \"\"\r\n\t});\r\n\r\n\tconst BadgeHandler = (event) => {\r\n\t\tconst value = event.target.value.trim();\r\n\t\tconst name = event.target.name;\r\n\t\tsetBadge({\r\n\t\t\t...badge,\r\n\t\t\t[name]: value\r\n\t\t});\r\n\t};\r\n\r\n\tconst BadgeOptionsHandler = (event) => {\r\n\t\tconst value = event.target.checked;\r\n\t\tconst name = event.target.name;\r\n\t\tsetBadge({\r\n\t\t\t...badge,\r\n\t\t\t[name]: value\r\n\t\t});\r\n\t};\r\n\r\n\treturn (\r\n\t\t<main>\r\n\t\t\t<Container maxWidth=\"sm\" >\r\n\t\t\t\t<Grid container spacing={2} display=\"flex\" alignContent=\"center\" height=\"100vh\" >\r\n\t\t\t\t\t<Badge badge={badge} /> {/*Badge*/}\r\n\r\n\t\t\t\t\t<Grid item xs={12} md={6}> {/*Label*/}\r\n\t\t\t\t\t\t<FormControl fullWidth >\r\n\t\t\t\t\t\t\t<TextField\r\n\t\t\t\t\t\t\t\tname=\"label\"\r\n\t\t\t\t\t\t\t\tvalue={badge.label}\r\n\t\t\t\t\t\t\t\tonChange={BadgeHandler}\r\n\r\n\t\t\t\t\t\t\t\tlabel=\"Technology\"\r\n\t\t\t\t\t\t\t\thelperText=\"Framework, library, etc.\"\r\n\t\t\t\t\t\t\t\tvariant=\"standard\"\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</FormControl>\r\n\t\t\t\t\t</Grid>\r\n\r\n\t\t\t\t\t<Grid item xs={12} md={6}> {/*Version*/}\r\n\t\t\t\t\t\t<FormControl fullWidth>\r\n\t\t\t\t\t\t\t<TextField\r\n\t\t\t\t\t\t\t\tname=\"version\"\r\n\t\t\t\t\t\t\t\tvalue={badge.version}\r\n\t\t\t\t\t\t\t\tonChange={BadgeHandler}\r\n\r\n\t\t\t\t\t\t\t\tlabel=\"Version\"\r\n\t\t\t\t\t\t\t\thelperText=\" \"\r\n\t\t\t\t\t\t\t\tvariant=\"standard\"\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</FormControl>\r\n\t\t\t\t\t</Grid>\r\n\r\n\t\t\t\t\t<Grid item xs={12} md={6} > {/*Style*/}\r\n\t\t\t\t\t\t<FormControl fullWidth variant=\"standard\" >\r\n\t\t\t\t\t\t\t<InputLabel >Style</InputLabel>\r\n\t\t\t\t\t\t\t<Select\r\n\t\t\t\t\t\t\t\tname=\"style\"\r\n\t\t\t\t\t\t\t\tvalue={badge.style}\r\n\t\t\t\t\t\t\t\tonChange={BadgeHandler}\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tlabel=\"Style\"\r\n\t\t\t\t\t\t\t\tvariant=\"standard\"\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t<MenuItem value=\"for-the-badge\" >For the badge</MenuItem>\r\n\t\t\t\t\t\t\t\t<MenuItem value=\"flat\" >Flat</MenuItem>\r\n\t\t\t\t\t\t\t\t<MenuItem value=\"flat-square\" >Flat square</MenuItem>\r\n\t\t\t\t\t\t\t\t<MenuItem value=\"plastic\" >Plastic</MenuItem>\r\n\t\t\t\t\t\t\t</Select>\r\n\t\t\t\t\t\t</FormControl>\r\n\t\t\t\t\t</Grid>\r\n\r\n\t\t\t\t\t<Grid item xs={12} md={6} textAlign=\"center\" > {/*Options*/}\r\n\t\t\t\t\t\t<FormLabel component=\"legend\" >Options</FormLabel>\r\n\t\t\t\t\t\t<FormControl>\r\n\t\t\t\t\t\t\t<FormGroup row >\r\n\t\t\t\t\t\t\t\t<FormControlLabel\r\n\t\t\t\t\t\t\t\t\tlabel=\"Logo\"\r\n\t\t\t\t\t\t\t\t\tcontrol={<CheckBox\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tname=\"hasLogo\"\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tchecked={badge.hasLogo}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tonChange={BadgeOptionsHandler}\r\n\t\t\t\t\t\t\t\t\t\t\t\t/>}\r\n\t\t\t\t\t\t\t\t/> \r\n\t\t\t\t\t\t\t\t<FormControlLabel\r\n\t\t\t\t\t\t\t\t\tlabel=\"Version\"\r\n\t\t\t\t\t\t\t\t\tcontrol={<CheckBox\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tname=\"hasVersion\"\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tchecked={badge.hasVersion}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tonChange={BadgeOptionsHandler}\r\n\t\t\t\t\t\t\t\t\t\t\t\t/>}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t</FormGroup>\r\n\t\t\t\t\t\t</FormControl>\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t</Grid>\r\n\t\t\t</Container>\r\n\t\t</main>\r\n\t);\r\n};\r\n\r\nexport default App; //Export component","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\n//Styles\r\nimport './index.css'\r\n\r\nReactDOM.render(\r\n\t<React.StrictMode>\r\n\t\t<App />\r\n\t</React.StrictMode>,\r\n\tdocument.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}