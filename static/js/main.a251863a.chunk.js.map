{"version":3,"sources":["App.jsx","reportWebVitals.js","index.js"],"names":["languagesList","placeholders","language","version","url","leftColor","rightColor","useStyle","makeStyles","center","display","justifyContent","grid","height","App","classes","useState","badge","setBadge","tempValue","setTempValue","src_url","Grid","container","spacing","item","className","xs","length","href","src","alt","FormControl","fullWidth","Autocomplete","value","onChange","newValue","inputValue","onInputChange","event","index","options","renderInput","params","TextField","variant","label","inputProps","autoComplete","required","target","type","helperText","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a251863a.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\n\r\n//Se importan hooks de Material-UI\r\nimport { Grid, TextField, FormControl, Autocomplete } from '@mui/material';\r\nimport { makeStyles } from '@mui/styles';\r\n//import CheckIcon from '@mui/icons-material/Check';\r\n\r\n//Hojas de estilo\r\nimport './App.css';\r\n\r\n//Lista de lenguajes\r\nconst languagesList = [\r\n   'Python',\r\n   'MongoDB',\r\n   'Node.js',\r\n   'React'\r\n];\r\n\r\nconst placeholders = [\r\n   { language: 'Python', version: '3.8.5', url: 'https://www.python.org/', leftColor: 'ffd43b', rightColor: '1f425f' },\r\n   { language: 'MongoDB', version: '4.0.8', url: 'https://www.mongodb.com/', leftColor: '3fa037', rightColor: '3f3e42' },\r\n   { language: 'Node.js', version: '16.11.1', url: 'https://nodejs.org/', leftColor: '3c873a', rightColor: '303030' },\r\n   { language: 'React', version: '17.0.2', url:'https://reactjs.org/', leftColor: '61dbfb', rightColor: '1f232a' }\r\n];\r\n\r\nconst useStyle = makeStyles({\r\n   center: {\r\n      display: 'flex',\r\n      justifyContent: 'center'\r\n   },\r\n   grid: {\r\n      height: '63.5px'\r\n   }\r\n});\r\n\r\n//Contenido del componente\r\nconst App = () => {\r\n   const classes = useStyle();\r\n\r\n   const [ badge, setBadge ] = useState({\r\n      language: '',\r\n      leftColor: '',\r\n      rightColor: '',\r\n      url: '',\r\n      version: ''\r\n   });\r\n\r\n   const [ tempValue, setTempValue ] = useState('');\r\n\r\n   const badgeHandler = (event, newValue) => {\r\n      for( let index=0; index<languagesList.length; index++ ){\r\n         if(newValue === placeholders[index].language){\r\n            badge.leftColor = placeholders[index].leftColor;\r\n            badge.rightColor = placeholders[index].rightColor;\r\n            break\r\n         }\r\n      };\r\n      setBadge({...badge, language: newValue});\r\n   };\r\n\r\n   const src_url = `https://img.shields.io/badge/${badge.version}-${badge.leftColor}?style=for-the-badge&logo=${badge.language}&label=${badge.language}&labelColor=${badge.rightColor}`;\r\n\r\n   return (\r\n      <>\r\n         <Grid container spacing={2}>\r\n            <Grid item container spacing={2} className={classes.grid} > {/*Badge*/}\r\n               <Grid item xs={4} />\r\n               <Grid item xs={4} className={classes.center} >\r\n                  {badge.language.length >0  ? (\r\n                     <a href={badge.url}>\r\n                        <img src={src_url} alt=\"badge\" />\r\n                     </a>\r\n                  ):null}\r\n               </Grid>\r\n               <Grid item xs={4} />\r\n            </Grid>\r\n            <Grid item container spacing={2} > {/*Inputs*/}\r\n               <Grid item xs={4} />\r\n               <Grid item xs={2} >\r\n                  <FormControl fullWidth >\r\n                     <Autocomplete\r\n                        //Valores visuales\r\n                        value={tempValue}\r\n                        onChange={(value, newValue) => {\r\n                           setTempValue(newValue);\r\n                        }}\r\n\r\n                        //Valores reales\r\n                        inputValue={badge.language}\r\n                        onInputChange={badgeHandler}\r\n\r\n                        options={languagesList}\r\n                        renderInput={(params) => (\r\n                           <TextField\r\n                              {...params}\r\n                              variant='standard'\r\n                              label='Language'\r\n                              inputProps={{\r\n                                 ...params.inputProps,\r\n                                 autoComplete: 'new-password',\r\n                              }}\r\n                              required />\r\n                        )}\r\n                     />\r\n                  </FormControl>\r\n               </Grid>\r\n               <Grid item xs={2} >\r\n                  <FormControl fullWidth >\r\n                     <TextField\r\n                        required\r\n                        variant='standard'\r\n                        label='Version'\r\n                        value={badge.version}\r\n                        onChange={({target:{value}}) => {\r\n                           setBadge({...badge, version: value});\r\n                        }}\r\n                     />\r\n                  </FormControl>\r\n               </Grid>\r\n               <Grid item xs={4} />\r\n               <Grid item xs={4} />\r\n               <Grid item xs={4} >\r\n                  <FormControl fullWidth >\r\n                     <TextField\r\n                        variant='standard'\r\n                        type='text'\r\n                        label='URL'\r\n                        helperText='Page to be redirected to when clicked'\r\n                     />\r\n                  </FormControl>\r\n               </Grid>\r\n               <Grid item xs={4} />\r\n            </Grid>\r\n         </Grid>\r\n      </>\r\n   );\r\n};\r\n\r\nexport default App; //Se exporta el componente","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\n//Se importan hojas de estilo\r\nimport './index.css'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}